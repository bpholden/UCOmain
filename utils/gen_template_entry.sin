#! @KPYTHON@
from __future__ import print_function
import argparse
from datetime import datetime
import os
import time
import sys

import numpy as np

import ParseUCOSched
import UCOScheduler as ds


if __name__ == "__main__":

    parser = argparse.ArgumentParser(
        description="Generate a script entry for a template observation for a target in googledex.dat file",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        epilog="Example: gen_template_entry.py target_name"
    )
    parser.add_argument(
        "target",
        metavar="target_name",
        type=str,
        nargs="+",
        help="Name of the target to generate the template entry for"
    )
    args =  parser.parse_args()

    OUTDIR = "."
    OUTFN = "googledex.dat"
    if os.path.exists(os.path.join(OUTDIR, OUTFN)) is False:
        print("No %s, no worky" % (OUTFN))
        sys.exit()


    fp = open("tonight.lst", "a+", encoding="ascii")
    star_table, stars  = ParseUCOSched.parse_UCOSched(outfn=OUTFN,outdir=OUTDIR)
    bstars = star_table['Bstar'] == "Y"

    dt = datetime.utcfromtimestamp(int(time.time()))
    for arg in args.target:
        arg = arg.strip()
        if arg in star_table['name']:
            a_idx, = np.where(star_table['name'] == arg)
            idx = a_idx[0]
            owner = star_table['sheetn'][idx]
            bidx, bfinidx = ds.find_Bstars(star_table, idx, bstars)

            bline = ds.make_scriptobs_line(star_table[bstars][bidx], dt,
                                           decker="N", I2="Y", owner=owner, focval=2)
            line = ds.make_scriptobs_line(star_table[idx], dt, decker="N",
                                          I2="N", owner=owner, temp=True)
            bfinline = ds.make_scriptobs_line(star_table[bstars][bfinidx], dt,
                                              decker="N", I2="Y", owner=owner, focval=2)

            fp.write(bline + " # temp=Y\n")
            fp.write(line + " # temp=Y\n")
            fp.write(bfinline + " # temp=Y end\n")
