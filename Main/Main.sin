#! @KPYTHON@
from __future__ import print_function

import argparse
import atexit
import functools
import math
import os
import os.path
import re
import signal
import sys
import datetime

import astropy.io.ascii
import astropy.time

# UCSC script for the task that runs everything
# Monitors and operates the APF for an observing night



try:
    import APF as APFLib
    import APFTask
    import ktl
except:
    pass

import APFControl
import ParseUCOSched
import UCOScheduler as ds
from apflog import *
from Calibrate import Calibrate
from getUCOTargets import getUCOTargets
from Observe import Observe

os.umask(0o007)

success = False

PARENT = 'master'

# global
paused = False

POSSIBLE_PHASES = ["Init", "Focus", "Cal-Pre", "Watching", "Cal-Post", "Focus-Post"]

def control_watch(keyword,parent):
    if keyword['populated'] == False:
        return
    try:
        value = keyword['ascii']
        global paused
        if value == "Abort":
            APFTask.set(parent, suffix='STATUS', value='Exited/Failure')
            APF.log("Aborted by APFTask")
            shutdown()
        elif value == "Pause" and not paused:
            try:
                APFTask.set(parent, suffix='STATUS', value='PAUSED')
                paused = True
            except:
                APF.log("Failure to set STATUS in APFTask", level="error")
                shutdown()

        else:
            try:
                APFTask.set(parent, suffix='STATUS', value='Running')
                paused = False
            except:
                APF.log("Failure to set STATUS in APFTask", level='error')
                shutdown()

    except:
        return


def signal_shutdown(signal, frame):
    shutdown()

def shutdown():
    global success
    if success == True:
        status = 'Exited/Success'

    else:
        status = 'Exited/Failure'

    try:
        APFTask.set(parent, 'STATUS', status)
        sys.exit()
    except:
        print('Exited/Failure')
        os._exit(1)
    else:
        print(status)
        os._exit(0)

def get_start_time(hr, mn):
    '''
    get_start_time(hr, mn)

    Returns a UNIX time stamp for the start time
    '''
    lt = datetime.datetime.now()
    ct = datetime.datetime.utcnow()

    td_utc = ct - lt
    td_utc_off = int(10*math.floor(td_utc.seconds/10))

    # the hr and mn arguments are for the UT time
    st = datetime.datetime(ct.year, ct.month, ct.day, hr, mn)
    if lt.hour >= 12 and ct.day == lt.day:
        # the usual start time is the afternoon,
        # sunset is after the start of next day in UT
        # if the ut day and the local day are the same
        # it is early afternoon and we need to add a day
        # if it is late enough, the ut day will be correct
        st += datetime.timedelta(days=1)

    # strftime assumes that this a local time, so the time stamp is wrong by the UT offset
    st -= datetime.timedelta(seconds=td_utc_off)
    ts = float(st.strftime("%s"))

    return ts

def calc_focus_start_time():
    '''
    calc_focus_start_time()

    computes the time before sunset to begin the instrument
    focus

    This returns a number of values including
    start_time - a UNIX time stamp to begin
    start_dt - a delta time in seconds
    sun_dt - a delta time in seconds to sunset
    time_to_sunset + 1200 - 20 minutes after sunset

    '''
    # computes time before sunset
    udt = datetime.datetime.utcnow()
    dt = datetime.datetime.now()
    time_to_sunset = ds.compute_sunset(udt)
    if time_to_sunset > 36000:
        # the sun has already set
        start_time = -1.
    else:
        start_time = time_to_sunset - 3.0*3600.
    t_delta = datetime.timedelta(0,start_time)
    sun_delta = datetime.timedelta(0,time_to_sunset)
    start_dt = dt + t_delta
    sun_dt = dt + sun_delta
    return start_time, start_dt, sun_dt, time_to_sunset + 1200

def parse_args(apftask):
    p_c = POSSIBLE_PHASES
    w_c = ["on", "off", "auto"]
    b_c = [1, 2, 4]
    parser = argparse.ArgumentParser(description="Set default options")
    parser.add_argument('-n', '--name', type=str,default=None, help='This values is used as the UCAM observer name, as well as the file prefix.')
    parser.add_argument('-o', '--obsnum', type=int, help='Sets the UCAM observation number to this integer value.')
    parser.add_argument('-b', '--binning', choices=b_c, default=1, type=int, help='Sets the UCAM binning, bins in both pixels, allowed to be 1, 2 or 4.')
    parser.add_argument('-p', '--phase', choices=p_c, help='Specify the starting phase of the watcher. Allows for skipping standard procedures.')
    parser.add_argument('-f', '--fixed', default=None, help='Specify a fixed target list to observe. File will be searched for relative to the current working directory.')
    parser.add_argument('-t', '--test', action='store_true', help="Start the watcher in test mode. No modification to telescope, instrument, or observer settings will be made.")
#    parser.add_argument('-r', '--restart', action='store_true', default=False, help="Restart the specified fixed star list from the beginning. This resets scriptobs_lines_done to 0.") # removed should possible make default True and this option be False
    parser.add_argument('-w', '--windshield', choices=w_c, default='auto', help="Turn windshielding on, off, or let the software decide based on the current average wind speed (Default is auto). Velocity > %.1f mph turns windshielding on." % (APFControl.WINDSHIELD_LIMIT))
    parser.add_argument('-c', '--calibrate', default='uco', type=str, help="Specify the calibrate script to use. Specify string to be used in calibrate 'arg' pre/post")
    parser.add_argument('-l', '--line', type=int, help="If a fixed starlist is given, starts the list at line N.")
    parser.add_argument('-s', '--start', default=None, type=str, help="When specified with a fixed starlist, this option starts that list at that UT (e.g. 09:00).")
    parser.add_argument('--raster', action='store_true', default=False, help="If a fixed starlist is given, use it for a raster scan.")
    parser.add_argument('--too', default=None, help="Download this sheet every 20 minutes for ToO targets")

    parser.add_argument('--rank_table', default='2024B_ranks', help="Optional name for table of sheet ranks")
    parser.add_argument('--sheet',default=None,help="Optional name for a Google spreadsheet")
    parser.add_argument('--owner',default='public',help="Optional name for file owners")
    parser.add_argument('--no_Bstar', action='store_true', default=False, help="Do not observe B stars")

    parser.add_argument('--time_left',default=None,help="File name for remaining time in programs")

    opt = parser.parse_args()

    saved_time = ''
    if opt.fixed != None:
        try:
            saved_time = apftask.read('MASTER_UTSTARTLIST',timeout=5)
        except Exception as e:
            apflog("Cannot read apftask.MASTER_UTSTARTLIST: %s" % (e), level='warn', echo=True)

    if opt.start != None and opt.fixed != None and saved_time == '':

        mtch = re.search("\A(\d+)\:(\d+)",opt.start)
        if mtch:
            hr = int(mtch.group(1))
            mn = int(mtch.group(2))
            opt.start = get_start_time(hr,mn)
            try:
                apftask.write("MASTER_UTSTARTLIST", opt.start, wait=False)
            except Exception as e:
                apflog("Cannot write apftask.MASTER_UTSTARTLIST: %s" % (e), level='warn', echo=True)

        else:
            print("Start time %s does not match required format hours:minutes where both the hours and the minutes are integers", (opt.start))
            shutdown()

    elif opt.fixed != None and saved_time != '':
        opt.start = saved_time

    if opt.name is None:
        now = datetime.datetime.now()
        oneday = datetime.timedelta(days=-1)
        if now.hour < 12:
            now += oneday
        opt.name = '%4d%02d%02d' % (now.year,now.month,now.day)

    if opt.sheet is not None:
        try:
            apftask.write('MASTER_SHEETLIST',opt.sheet,timeout=2)
        except Exception as e:
            apflog("Cannot write apftask.MASTER_SHEETLIST: %s" % (e), level='warn', echo=True)
        opt.sheet = opt.sheet.split(",")

    return opt


def find_obs_num(last):
    """
    find_obs_num()
    """
    last += 100 - (last % 100)
    if last % 1000 > 700:
        last += 1000 - (last % 1000)
    if last >= 20000:
        last = 10000

    return last

def set_obs_defaults(opt):
    opt.owner = 'public'
    if opt.obsnum == None:
        apflog("Figuring out what the observation number should be.", echo=True)
        opt.obsnum = find_obs_num(int(ktl.read('apftask','MASTER_LAST_OBS_UCSC', binary=True)))
    else:
        opt.obsnum = int(opt.obsnum)

    return opt




if __name__ == '__main__':

    apflog("Starting main...")
    apftask = ktl.Service("apftask")

    # Parse the command line arguments
    opt = parse_args(apftask)

    # Register the atexit function after parsing the command line arguments
    # This prevents printing the help followed by exited/failure message
    atexit.register(shutdown)
    signal.signal(signal.SIGINT,  signal_shutdown)
    signal.signal(signal.SIGTERM, signal_shutdown)

    # Log the Command line arguments
    apflog("Command Line Args:")
    od = vars(opt)
    for o in od:
        if od[o] is not None:
            apflog(o + ': ' +str(od[o]))


    if opt.test:
        debug = True
        parent = 'example'
        apflog("main starting in test mode.")
    else:
        debug = False
        parent = 'master'


    # Establish this as the only running main script ( Or example task in test mode )
    try:
        apflog("Attempting to establish apftask as %s" % parent)
        APFTask.establish(parent, os.getpid())
    except Exception as e:
        apflog("Cannot establish as name %s: %s." % (parent,e), echo=True)
        shutdown()
    else:
        # Set up monitoring of the current phase
        phase = apftask("%s_PHASE" % parent)
        phase.monitor()

    # Set preliminary signal and tripwire conditions
    apflog("Setting APFTask signal and tripwire.")
    APFTask.set(parent, "SIGNAL", "TERM")
    APFTask.set(parent, "TRIPWIRE", "TASK_ABORT")

    control = apftask[parent + '_CONTROL']
    cw = functools.partial(control_watch, parent=parent)
    control.callback(cw)
    control.monitor(wait=False)

    apflog("Initiallizing APF monitors.", echo=True)

    # Aquire an instance of the APF class, which holds
    # wrapper functions for controlling the telescope
    apf = APFControl.APF(task=parent, test=debug)
    APFTask.waitFor(parent, True, timeout=5)
    apf.init_guide_cam()

    possible_list = ''
    try:
        possible_list = apftask.read('MASTER_STARLIST',timeout=5)
    except Exception as e:
        apflog("Cannot read apftask.MASTER_STARLIST: %s" % (e),level='warn',echo=True)

    if opt.fixed != None:
        # This resets lines done if this is a new target list
        if opt.fixed != possible_list:
            APFLib.write(apf.robot["SCRIPTOBS_LINES_DONE"], 0)
            APFLib.write(apf.robot["MASTER_STARLIST"], opt.fixed)
        if opt.line != None:
            APFLib.write(apf.robot["SCRIPTOBS_LINES_DONE"], int(opt.line))
            apflog("Will be starting star list %s at line %d" % (opt.fixed, int(opt.line)),echo=True)
        else:
            apflog("Will be starting star list %s at line 0" % opt.fixed,echo=True)



    # All the phase options that this script uses.
    # This allows us to check if we exited out of the script early.

    phase_index = 0
    # If a command line phase was specified, use that.
    if opt.phase != None:
        APFTask.phase(parent, opt.phase)
        phase_index = POSSIBLE_PHASES.index(str(opt.phase).strip())
        phase.poll()
    elif phase.read() != "":
        # start where the main left off
        phase_index = POSSIBLE_PHASES.index(str(phase.read()).strip())
        phase.poll()

    # If the phase isn't a valid option
    # then assume we are starting a fresh night and start from setting the observer information.
    if str(phase).strip() not in POSSIBLE_PHASES:
        apflog("Starting phase is not valid. Phase being set to Init", echo=True)
        APFTask.phase(parent, "Init")
    apflog("Phase at start is: %s" % phase, echo=True)
    APFLib.write(apf.robot["SCRIPTOBS_MESSAGE"], '')


    # Make sure that the command line arguments are respected.
    # Regardless of phase, if a name, obsnum, or reset was commanded,
    #  make sure we perform these operations.

    APFLib.write(apf.robot["SCRIPTOBS_MESSAGE"], "Setting defaults for observing.")
    if opt.fixed:
        if not os.path.exists(opt.fixed):
            errmsg = "starlist %s does not exist" % (opt.fixed)
            apflog(errmsg, level="error", echo=True)
            shutdown()
        if not debug:
            APFTask.set(parent, "STARLIST", opt.fixed)
    else:
        if not debug:
            APFTask.set(parent, "STARLIST", "")

    if phase_index == 0:
        apflog("Setting Observer Information", echo=True)
        opt = set_obs_defaults(opt)
        apflog("Using %s for name and %s for obs number." % (opt.name, repr(opt.obsnum)), echo=True)
        apf.set_observer_info(num=opt.obsnum, name=opt.name, owner=opt.owner)

        apflog("Setting the task step to 0")
        APFTask.step(parent, 0)
        if os.path.exists(os.path.join(os.getcwd(),"googledex.dat")):
            logpush(os.path.join(os.getcwd(),"googledex.dat"))

        if os.path.exists(os.path.join(os.getcwd(),"robot.log")):
            logpush(os.path.join(os.getcwd(),"robot.log"))

        apflog("Setting SCRIPTOBS_LINES_DONE to 0")
        APFLib.write(apf.robot["SCRIPTOBS_LINES_DONE"], 0)
        APFLib.write(apf.robot["MASTER_OBSBSTAR"], True,binary=True)
        apflog("Initialization finished")

    if apf.desired_outfile is None and opt.name is not None:
        apf.desired_outfile = opt.name

    stime, start_dt, sun_dt, target_time = calc_focus_start_time()

    if phase_index <= 1:

        waitstr = "Will now wait %.1f seconds before starting focusinstr" % (stime)
        apflog(waitstr, echo=True)
        APFTask.set(parent, suffix="MESSAGE", value=waitstr, wait=False)
        startstr = "Estimating focusinstr will start at %s for a sunset at %s" % ( start_dt, sun_dt)
        apflog(startstr, echo=True)
        APFTask.set(parent, suffix="MESSAGE", value=startstr, wait=False)
    else:
        stime = 0

    if phase_index < 3:
        apflog("Starting calibration thread at phase %s" % \
               (POSSIBLE_PHASES[phase_index]), echo=True)
        calibrate = Calibrate(apf, 'public', stime, opt.calibrate, \
                              opt.name, opt.obsnum, phase_index=phase_index, \
                              task=parent, test=debug, possible_phases=POSSIBLE_PHASES)
    else:
        apflog("Skipping calibrations", echo=True)
        calibrate = None

    # Start the main watcher thread
    observe = Observe(apf, opt)
    getUCOTargets = getUCOTargets(opt, task=parent, wait_time=target_time)

    apf.instr_permit()
    apflog("Starting the main watcher." ,echo=True)
    mstart = astropy.time.Time(ktl.read("apftask","master_last_start",binary=True),format='unix')

    observe.task = parent
    # observe object should be set up for running now
    observe.start()

    while observe.signal:
        # Observe is running, check for keyboard interupt
        try:
            currTime = datetime.datetime.now()
            # Check if it is after ~8:00AM.
            # If it is, something must be hung up, so lets force
            #  a closeup and run post cals.
            #  Log that we force a close so we can look into why this happened.
            if currTime.hour == 8:
                # Its 8 AM. Lets closeup
                observe.stop()
                observe.signal=False
                err_str = "Observe was still running at 8AM."
                err_str += " It was stopped and post calibrations will be attempted."
                apflog(err_str, level='warn')
                break
            if observe.isAlive() is False:
                # this means that the thread died, usually because of an uncaught exception
                # observe.signal will still be True
                # overwrite observe with a new instance and restart the thread
                err_str = "Observe thread has died. Will attempt to restart."
                apflog(err_str, level='error', echo=True)

                observe = Observe(apf,opt)
                observe.task = parent

                observe.start()

            if calibrate:
                if calibrate.isAlive() is False and ktl.read("apftask","focusinstr_status",binary=True) != 3:
                    fstart = astropy.time.Time(ktl.read("apftask","focusinstr_last_start",binary=True),format='unix')
                    if (ktl.read("apftask","focusinstr_status",binary=True)) > 3 and (fstart < mstart):
                        # this means that the thread died, usually because of an uncaught exception
                        apflog("Calibrate thread has died!", level='Alert', echo=True)
                        try:
                            # this gets set to turn the alarm
                            ktl.write("apftask","focusinstr_status",3,wait=False,binary=True)
                        except:
                            pass

            if debug:
                print('Observe is running.')
                print(str(apf))
            APFTask.waitFor(parent, True, timeout=30)
        except KeyboardInterrupt:
            apflog("main has been killed by user.", echo=True)
            observe.stop()
            shutdown()
        except:
            apflog("main killed by unknown.", echo=True)
            observe.stop()
            shutdown()

    # Check if the observe left us an exit message.
    # If so, something strange likely happened so log it.
    try:
        msg = observe.exitMessage
    except AttributeError:
        pass
    else:
        apflog(msg, level='Info', echo=True)

    # We have finished taking data, and presumably it is the morning.
    apf.set_apfteq_mode('Morning')
    apf.close(force=True)

    # Keep a copy of observed_targets around for a bit just in case
    if os.path.exists(os.path.join(os.getcwd(),"observed_targets")):
        try:
            apflog("Updating the online googledex with the observed times", level='Info', echo=True)
            obs_fn = os.path.join(os.getcwd(),"observed_targets")
            n_up = ParseUCOSched.update_sheet_lastobs(obs_fn,outfn="googledex.dat")
        except Exception as e:
            apflog("Error: Updating the online googledex has failed: %s" % (e), level="error")
        else:
            if n_up > 0:
                apflog("Updated %d entries in the online googledex" % (n_up), level='Info', echo=True)
            else:
                apflog("Failure updating the online googledex", level='warn', echo=True)
        logpush(os.path.join(os.getcwd(),"observed_targets"))

    for fn in ("googledex.dat", "rank_table", "hour_table", "robot.log","selected_targets"):
        if os.path.exists(os.path.join(os.getcwd(), fn)):
            logpush(os.path.join(os.getcwd(), fn))

    apfmon = ktl.Service('apfmon')

    try:
        apf.ok2open.monitor(start=False)
    except Exception as e:
        apflog("Note: Cannot stop monitoring ok2open. %s" % (e), level="warn", echo=True)
    # 5) Take morning calibrations
    phase_index = 4
    APFTask.phase(parent, POSSIBLE_PHASES[phase_index])
    apf.instr_permit()
    result = apf.calibrate(script=opt.calibrate, time='post')
    if not result:
        apflog("Calibrate Post has failed.", level='warn',echo=True)
        result = apf.calibrate(script=opt.calibrate, time='post')
        if not result:
            apflog("Calibrate Post has failed twice.", level='error',echo=True)
            APFTask.set(parent, suffix="MESSAGE",value="Calibrate Post failed twice",wait=False)

    if not debug:
        APFTask.set(parent, suffix="LAST_OBS_UCSC", value=apf.ucam["OBSNUM"].read())

    bin_str = "%d,%d" % (1,1)
    apf.ucam['BINNING'].write(bin_str)

    # Focus the instrument once more
    phase_index = 5
    APFTask.phase(parent, POSSIBLE_PHASES[phase_index])
    apflog("Running Focus-Post", echo=True)
    result = apf.focusinstr(log_error_level='error')
    if not result:
        apflog("Focus-post has failed", echo=True)
    else:
        apflog("Focus-post has finished successfully.", echo=True)

    # We have done everything we needed to, so leave
    # the telescope in day mode to allow it to start thermalizing to the next night.
    apf.set_apfteq_mode('Day')

    # Update the last observation number to account for the morning calibration shots.

    if not debug:
        APFTask.set(parent, suffix="LAST_OBS_UCSC", value=apf.ucam["OBSNUM"].read())
        ostr = "Updating last observation number to %s" % (apf.ucam["OBSNUM"].read())
        APFTask.set(parent, suffix="MESSAGE",value=ostr,wait=False)
        apftask('MASTER_STARLIST').write('',wait=False)
        apftask('MASTER_UTSTARTLIST').write('',wait=False)
        apftask["MASTER_OBSBSTAR"].write(True,binary=True,wait=False)

    _ = apf.turn_off_inst()
    APFTask.set(parent, suffix="MESSAGE",value="Turning off the motors",wait=False)

    # All Done!
    APFTask.phase(parent, "Finished")

    success = True
    shutdown()
